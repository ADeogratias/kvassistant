import 'package:flutter/material.dart';
import 'package:avatar_glow/avatar_glow.dart';

void main() => runApp(const MyApp());

  class MyApp extends StatelessWidget {
    const MyApp({super.key});

    // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Digital Umuganda',
      theme: ThemeData(

        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Digital Umuganda'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;
  bool _isListening = false;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {

    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),

      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: AvatarGlow(
        animate: true,//_isListening,
        glowColor: Theme.of(context).primaryColor,
        endRadius: 75.0,
        duration: const Duration(milliseconds: 2000),
        repeatPauseDuration: const Duration(milliseconds: 100),
        repeat: true,
        child: FloatingActionButton(
          onPressed: (){}, // _listen,
          child: Icon(_isListening ? Icons.mic : Icons.mic_none),
        ),
      ),
      
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button',
            ),
            // Text(
            //   '$_counter',
            //   style: Theme.of(context).textTheme.headlineMedium,
            // ),

            // FloatingActionButton(
            //   onPressed: _incrementCounter,
            //   tooltip: 'Increment',
            //   child: const Icon(Icons.add),
            // ),
          ],
        ),
      ),
      // floatingActionButton: FloatingActionButton(
      //   onPressed: _incrementCounter,
      //   tooltip: 'Increment',
      //   child: const Icon(Icons.add),
      // ),
    );
  }

  // void _listen() async {
  //   if(!_isListening){
  //     bool available = await _speech.initialize(  
  //       onStatus: (val) => print('onStatus: $val'),
  //       onError: (val) => print('onError: $val'),
  //     );
  //     if(available){
  //       setState(() => _isListening = true);
  //     }
  //     else{
  //       setState(() => _isListening = false);
  //     }
  //   }
  // }
}














  Future<String> submitFormService(
    String token, {
    String outletId,
    String fisikScores,
    String atmScores,
    String securityScores,
    String csScores,
    String tellerScores,
    String telpScores,
    List<File> audio,
    List<File> assetsImage,
    String fisikConvos,
    String atmConvos,
    String securityConvos,
    String csConvos,
    String tellerConvos,
    String telpConvos,
    String latitude,
    String longitude,
  }) async {
    // Map<String, String> headers = {
    //   "Accept": "application/json",
    //   "Content-Type": "multipart/form-data",
    //   "Authorization": "Bearer $token"
    // };

    //var postUri = Uri.parse("$endpoint/mobile/operator-one/assesment");
    var dio = Dio();
    (dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate =
        (HttpClient client) {
      client.badCertificateCallback =
          (X509Certificate cert, String host, int port) => true;
      return client;
    };
    FormData formData = new FormData();
    // var request = new http.MultipartRequest("POST", postUri);
    // request.headers.addAll(headers);
    // request.fields['domain_id'] = '$outletId';
    // request.fields['fisik_scores'] = '$fisikScores';
    // request.fields['atm_scores'] = '$atmScores';
    // request.fields['security_scores'] = '$securityScores';
    // request.fields['cs_scores'] = '$csScores';
    // request.fields['teller_scores'] = '$tellerScores';
    // request.fields['telephone_scores'] = '$telpScores';
    // request.fields['fisik_conversation'] = '$fisikConvos';
    // request.fields['atm_conversation'] = '$atmConvos';
    // request.fields['security_conversation'] = '$securityConvos';
    // request.fields['cs_conversation'] = '$csConvos';
    // request.fields['teller_conversation'] = '$tellerConvos';
    // request.fields['telepon_conversation'] = '$telpConvos';
    // request.fields['latitude'] = '$latitude';
    // request.fields['longitude'] = '$longitude';
    formData.fields.addAll([
      MapEntry('domain_id', '$outletId'),
      MapEntry('fisik_scores', '$fisikScores'),
      MapEntry('atm_scores', '$atmScores'),
      MapEntry('security_scores', '$securityScores'),
      MapEntry('cs_scores', '$csScores'),
      MapEntry('teller_scores', '$tellerScores'),
      MapEntry('telephone_scores', '$telpScores'),
      MapEntry('fisik_conversation', '$fisikConvos'),
      MapEntry('atm_conversation', '$atmConvos'),
      MapEntry('security_conversation', '$securityConvos'),
      MapEntry('cs_conversation', '$csConvos'),
      MapEntry('teller_conversation', '$tellerConvos'),
      MapEntry('telepon_conversation', '$telpConvos'),
      MapEntry('latitude', '$latitude'),
      MapEntry('longitude', '$longitude')
    ]);

    if (assetsImage != null) {
      print("image files: ${assetsImage.length}");
      for (int i = 0; i < assetsImage.length; i++) {
        print("URIURI --- ${assetsImage[i].path}");
        formData.files.add(MapEntry(
            'images[]',
            await MultipartFile.fromFile(assetsImage[i].path,
                contentType: new MediaType('image', 'jpg'))));
        // request.files.add(await http.MultipartFile.fromPath(
        //     'images[]', assetsImage[i].path,
        //     contentType: new MediaType('image', 'jpg')));
      }
    }

    if (audio != null) {
      print("audio files: ${audio.length}");
      for (int i = 0; i < audio.length; i++) {
        print("URIURI --- ${audio[i].path}");
        formData.files.add(MapEntry(
            'audio[]',
            await MultipartFile.fromFile(audio[i].path,
                contentType: new MediaType('audio', 'wav'))));
        // request.files.add(await http.MultipartFile.fromPath(
        //     'audio[]', audio[i].path,
        //     contentType: new MediaType('audio', 'wav')));
      }
    }

    print("REQ IMAGES ${assetsImage.length}");
    print("REQ AUDIO ${audio.length}");
    print("ini pake dio");
    // print("REQ FILES ${request.files.length}");

    // print("Body form ${request.fields}");
    // print("Body files ${request.files.length}");
    dio.options.headers = {
      "Accept": "application/json",
      "Content-Type": "multipart/form-data",
      "Authorization": "Bearer $token"
    };
    var response = await dio.post("$endpoint/mobile/operator-one/assesment",
        data: formData);
    //final respStr = await response.stream.bytesToString();
    if (response.statusCode == 200) {
      print("Uploaded!");
      print(response.toString());
      // print("RESPONSE BODY TOP -- $respStr");
      // print(
      //     "RESPONSE BODY BOTTOM-- ${respStr.substring(respStr.length - 200, respStr.length - 1)}");
    } else {
      print("Failed lurd!");
      //print("RESPONSE BODY -- $respStr");
      //print(response.request.toString());
      print(response.statusCode);
    }

    return respo